/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace MultiDistributor {
  export type UserTokenAmountsStruct = {
    user: string;
    token: string;
    amount: BigNumberish;
  };

  export type UserTokenAmountsStructOutput = [string, string, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
  };
}

export interface MultiDistributorInterface extends utils.Interface {
  contractName: "MultiDistributor";
  functions: {
    "addToClaims((address,address,uint256)[],uint256,string)": FunctionFragment;
    "claim(address[])": FunctionFragment;
    "claimableBalances(address,address)": FunctionFragment;
    "getClaimableForAddresses(address[],address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "removeClaims(address[],address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalClaimed(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToClaims",
    values: [MultiDistributor.UserTokenAmountsStruct[], BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "claimableBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableForAddresses",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeClaims",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableForAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAdded(address,address,uint256,uint256,string)": EventFragment;
    "ClaimRemoved(address,address,uint256)": EventFragment;
    "Claimed(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ClaimAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  {
    rewardToken: string;
    claimer: string;
    amount: BigNumber;
    epochTimestamp: BigNumber;
    tag: string;
  }
>;

export type ClaimAddedEventFilter = TypedEventFilter<ClaimAddedEvent>;

export type ClaimRemovedEvent = TypedEvent<
  [string, string, BigNumber],
  { rewardToken: string; claimer: string; amount: BigNumber }
>;

export type ClaimRemovedEventFilter = TypedEventFilter<ClaimRemovedEvent>;

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  { rewardToken: string; claimer: string; amount: BigNumber }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MultiDistributor extends BaseContract {
  contractName: "MultiDistributor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToClaims(
      claimsToAdd: MultiDistributor.UserTokenAmountsStruct[],
      epochTimestamp: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableForAddresses(
      addresses: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        MultiDistributor.UserTokenAmountsStructOutput[],
        MultiDistributor.UserTokenAmountsStructOutput[]
      ] & {
        claimed: MultiDistributor.UserTokenAmountsStructOutput[];
        claimable: MultiDistributor.UserTokenAmountsStructOutput[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeClaims(
      addresses: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToClaims(
    claimsToAdd: MultiDistributor.UserTokenAmountsStruct[],
    epochTimestamp: BigNumberish,
    tag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableForAddresses(
    addresses: string[],
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      MultiDistributor.UserTokenAmountsStructOutput[],
      MultiDistributor.UserTokenAmountsStructOutput[]
    ] & {
      claimed: MultiDistributor.UserTokenAmountsStructOutput[];
      claimable: MultiDistributor.UserTokenAmountsStructOutput[];
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeClaims(
    addresses: string[],
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalClaimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToClaims(
      claimsToAdd: MultiDistributor.UserTokenAmountsStruct[],
      epochTimestamp: BigNumberish,
      tag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(tokens: string[], overrides?: CallOverrides): Promise<void>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableForAddresses(
      addresses: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        MultiDistributor.UserTokenAmountsStructOutput[],
        MultiDistributor.UserTokenAmountsStructOutput[]
      ] & {
        claimed: MultiDistributor.UserTokenAmountsStructOutput[];
        claimable: MultiDistributor.UserTokenAmountsStructOutput[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeClaims(
      addresses: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimAdded(address,address,uint256,uint256,string)"(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null,
      epochTimestamp?: BigNumberish | null,
      tag?: null
    ): ClaimAddedEventFilter;
    ClaimAdded(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null,
      epochTimestamp?: BigNumberish | null,
      tag?: null
    ): ClaimAddedEventFilter;

    "ClaimRemoved(address,address,uint256)"(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): ClaimRemovedEventFilter;
    ClaimRemoved(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): ClaimRemovedEventFilter;

    "Claimed(address,address,uint256)"(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToClaims(
      claimsToAdd: MultiDistributor.UserTokenAmountsStruct[],
      epochTimestamp: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableForAddresses(
      addresses: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeClaims(
      addresses: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToClaims(
      claimsToAdd: MultiDistributor.UserTokenAmountsStruct[],
      epochTimestamp: BigNumberish,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableForAddresses(
      addresses: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeClaims(
      addresses: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
