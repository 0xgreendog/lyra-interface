/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace OptionMarketPricer {
  export type PricingParametersStruct = {
    optionPriceFeeCoefficient: BigNumberish;
    optionPriceFee1xPoint: BigNumberish;
    optionPriceFee2xPoint: BigNumberish;
    spotPriceFeeCoefficient: BigNumberish;
    spotPriceFee1xPoint: BigNumberish;
    spotPriceFee2xPoint: BigNumberish;
    vegaFeeCoefficient: BigNumberish;
    standardSize: BigNumberish;
    skewAdjustmentFactor: BigNumberish;
  };

  export type PricingParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    optionPriceFeeCoefficient: BigNumber;
    optionPriceFee1xPoint: BigNumber;
    optionPriceFee2xPoint: BigNumber;
    spotPriceFeeCoefficient: BigNumber;
    spotPriceFee1xPoint: BigNumber;
    spotPriceFee2xPoint: BigNumber;
    vegaFeeCoefficient: BigNumber;
    standardSize: BigNumber;
    skewAdjustmentFactor: BigNumber;
  };

  export type TradeLimitParametersStruct = {
    minDelta: BigNumberish;
    minForceCloseDelta: BigNumberish;
    tradingCutoff: BigNumberish;
    minBaseIV: BigNumberish;
    maxBaseIV: BigNumberish;
    minSkew: BigNumberish;
    maxSkew: BigNumberish;
    minVol: BigNumberish;
    maxVol: BigNumberish;
    absMinSkew: BigNumberish;
    absMaxSkew: BigNumberish;
    capSkewsToAbs: boolean;
  };

  export type TradeLimitParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    minDelta: BigNumber;
    minForceCloseDelta: BigNumber;
    tradingCutoff: BigNumber;
    minBaseIV: BigNumber;
    maxBaseIV: BigNumber;
    minSkew: BigNumber;
    maxSkew: BigNumber;
    minVol: BigNumber;
    maxVol: BigNumber;
    absMinSkew: BigNumber;
    absMaxSkew: BigNumber;
    capSkewsToAbs: boolean;
  };

  export type VarianceFeeParametersStruct = {
    defaultVarianceFeeCoefficient: BigNumberish;
    forceCloseVarianceFeeCoefficient: BigNumberish;
    skewAdjustmentCoefficient: BigNumberish;
    referenceSkew: BigNumberish;
    minimumStaticSkewAdjustment: BigNumberish;
    vegaCoefficient: BigNumberish;
    minimumStaticVega: BigNumberish;
    ivVarianceCoefficient: BigNumberish;
    minimumStaticIvVariance: BigNumberish;
  };

  export type VarianceFeeParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    defaultVarianceFeeCoefficient: BigNumber;
    forceCloseVarianceFeeCoefficient: BigNumber;
    skewAdjustmentCoefficient: BigNumber;
    referenceSkew: BigNumber;
    minimumStaticSkewAdjustment: BigNumber;
    vegaCoefficient: BigNumber;
    minimumStaticVega: BigNumber;
    ivVarianceCoefficient: BigNumber;
    minimumStaticIvVariance: BigNumber;
  };

  export type VegaUtilFeeComponentsStruct = {
    preTradeAmmNetStdVega: BigNumberish;
    postTradeAmmNetStdVega: BigNumberish;
    vegaUtil: BigNumberish;
    volTraded: BigNumberish;
    NAV: BigNumberish;
    vegaUtilFee: BigNumberish;
  };

  export type VegaUtilFeeComponentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    preTradeAmmNetStdVega: BigNumber;
    postTradeAmmNetStdVega: BigNumber;
    vegaUtil: BigNumber;
    volTraded: BigNumber;
    NAV: BigNumber;
    vegaUtilFee: BigNumber;
  };

  export type VarianceFeeComponentsStruct = {
    varianceFeeCoefficient: BigNumberish;
    vega: BigNumberish;
    vegaCoefficient: BigNumberish;
    skew: BigNumberish;
    skewCoefficient: BigNumberish;
    ivVariance: BigNumberish;
    ivVarianceCoefficient: BigNumberish;
    varianceFee: BigNumberish;
  };

  export type VarianceFeeComponentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    varianceFeeCoefficient: BigNumber;
    vega: BigNumber;
    vegaCoefficient: BigNumber;
    skew: BigNumber;
    skewCoefficient: BigNumber;
    ivVariance: BigNumber;
    ivVarianceCoefficient: BigNumber;
    varianceFee: BigNumber;
  };

  export type TradeResultStruct = {
    amount: BigNumberish;
    premium: BigNumberish;
    optionPriceFee: BigNumberish;
    spotPriceFee: BigNumberish;
    vegaUtilFee: OptionMarketPricer.VegaUtilFeeComponentsStruct;
    varianceFee: OptionMarketPricer.VarianceFeeComponentsStruct;
    totalFee: BigNumberish;
    totalCost: BigNumberish;
    volTraded: BigNumberish;
    newBaseIv: BigNumberish;
    newSkew: BigNumberish;
  };

  export type TradeResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    OptionMarketPricer.VegaUtilFeeComponentsStructOutput,
    OptionMarketPricer.VarianceFeeComponentsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    premium: BigNumber;
    optionPriceFee: BigNumber;
    spotPriceFee: BigNumber;
    vegaUtilFee: OptionMarketPricer.VegaUtilFeeComponentsStructOutput;
    varianceFee: OptionMarketPricer.VarianceFeeComponentsStructOutput;
    totalFee: BigNumber;
    totalCost: BigNumber;
    volTraded: BigNumber;
    newBaseIv: BigNumber;
    newSkew: BigNumber;
  };
}

export declare namespace LiquidityPool {
  export type LiquidityStruct = {
    freeLiquidity: BigNumberish;
    burnableLiquidity: BigNumberish;
    usedCollatLiquidity: BigNumberish;
    pendingDeltaLiquidity: BigNumberish;
    usedDeltaLiquidity: BigNumberish;
    NAV: BigNumberish;
  };

  export type LiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    freeLiquidity: BigNumber;
    burnableLiquidity: BigNumber;
    usedCollatLiquidity: BigNumber;
    pendingDeltaLiquidity: BigNumber;
    usedDeltaLiquidity: BigNumber;
    NAV: BigNumber;
  };
}

export declare namespace SynthetixAdapter {
  export type ExchangeParamsStruct = {
    spotPrice: BigNumberish;
    quoteKey: BytesLike;
    baseKey: BytesLike;
    quoteBaseFeeRate: BigNumberish;
    baseQuoteFeeRate: BigNumberish;
  };

  export type ExchangeParamsStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    quoteKey: string;
    baseKey: string;
    quoteBaseFeeRate: BigNumber;
    baseQuoteFeeRate: BigNumber;
  };
}

export declare namespace OptionMarket {
  export type TradeParametersStruct = {
    isBuy: boolean;
    isForceClose: boolean;
    tradeDirection: BigNumberish;
    optionType: BigNumberish;
    amount: BigNumberish;
    expiry: BigNumberish;
    strikePrice: BigNumberish;
    liquidity: LiquidityPool.LiquidityStruct;
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct;
  };

  export type TradeParametersStructOutput = [
    boolean,
    boolean,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    LiquidityPool.LiquidityStructOutput,
    SynthetixAdapter.ExchangeParamsStructOutput
  ] & {
    isBuy: boolean;
    isForceClose: boolean;
    tradeDirection: number;
    optionType: number;
    amount: BigNumber;
    expiry: BigNumber;
    strikePrice: BigNumber;
    liquidity: LiquidityPool.LiquidityStructOutput;
    exchangeParams: SynthetixAdapter.ExchangeParamsStructOutput;
  };

  export type StrikeStruct = {
    id: BigNumberish;
    strikePrice: BigNumberish;
    skew: BigNumberish;
    longCall: BigNumberish;
    shortCallBase: BigNumberish;
    shortCallQuote: BigNumberish;
    longPut: BigNumberish;
    shortPut: BigNumberish;
    boardId: BigNumberish;
  };

  export type StrikeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    strikePrice: BigNumber;
    skew: BigNumber;
    longCall: BigNumber;
    shortCallBase: BigNumber;
    shortCallQuote: BigNumber;
    longPut: BigNumber;
    shortPut: BigNumber;
    boardId: BigNumber;
  };
}

export declare namespace OptionGreekCache {
  export type TradePricingStruct = {
    optionPrice: BigNumberish;
    preTradeAmmNetStdVega: BigNumberish;
    postTradeAmmNetStdVega: BigNumberish;
    callDelta: BigNumberish;
    volTraded: BigNumberish;
    ivVariance: BigNumberish;
    vega: BigNumberish;
  };

  export type TradePricingStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    optionPrice: BigNumber;
    preTradeAmmNetStdVega: BigNumber;
    postTradeAmmNetStdVega: BigNumber;
    callDelta: BigNumber;
    volTraded: BigNumber;
    ivVariance: BigNumber;
    vega: BigNumber;
  };
}

export interface OptionMarketPricerInterface extends utils.Interface {
  contractName: "OptionMarketPricer";
  functions: {
    "acceptOwnership()": FunctionFragment;
    "getPricingParams()": FunctionFragment;
    "getTimeWeightedFee(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getTradeLimitParams()": FunctionFragment;
    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "getVarianceFeeParams()": FunctionFragment;
    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "pricingParams()": FunctionFragment;
    "setPricingParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setTradeLimitParams((int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "setVarianceFeeParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "tradeLimitParams()": FunctionFragment;
    "updateCacheAndGetTradeResult((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)": FunctionFragment;
    "varianceFeeParams()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWeightedFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeLimitParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeResult",
    values: [
      OptionMarket.TradeParametersStruct,
      OptionGreekCache.TradePricingStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVarianceFee",
    values: [
      OptionMarket.TradeParametersStruct,
      OptionGreekCache.TradePricingStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVarianceFeeParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVegaUtilFee",
    values: [
      OptionMarket.TradeParametersStruct,
      OptionGreekCache.TradePricingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ivImpactForTrade",
    values: [OptionMarket.TradeParametersStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPricingParams",
    values: [OptionMarketPricer.PricingParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeLimitParams",
    values: [OptionMarketPricer.TradeLimitParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setVarianceFeeParams",
    values: [OptionMarketPricer.VarianceFeeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeLimitParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCacheAndGetTradeResult",
    values: [
      OptionMarket.StrikeStruct,
      OptionMarket.TradeParametersStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "varianceFeeParams",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWeightedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVarianceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVarianceFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVegaUtilFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ivImpactForTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVarianceFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCacheAndGetTradeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "varianceFeeParams",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "PricingParametersSet(tuple)": EventFragment;
    "TradeLimitParametersSet(tuple)": EventFragment;
    "VarianceFeeParametersSet(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricingParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeLimitParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VarianceFeeParametersSet"): EventFragment;
}

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export type PricingParametersSetEvent = TypedEvent<
  [OptionMarketPricer.PricingParametersStructOutput],
  { pricingParams: OptionMarketPricer.PricingParametersStructOutput }
>;

export type PricingParametersSetEventFilter =
  TypedEventFilter<PricingParametersSetEvent>;

export type TradeLimitParametersSetEvent = TypedEvent<
  [OptionMarketPricer.TradeLimitParametersStructOutput],
  { tradeLimitParams: OptionMarketPricer.TradeLimitParametersStructOutput }
>;

export type TradeLimitParametersSetEventFilter =
  TypedEventFilter<TradeLimitParametersSetEvent>;

export type VarianceFeeParametersSetEvent = TypedEvent<
  [OptionMarketPricer.VarianceFeeParametersStructOutput],
  { varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStructOutput }
>;

export type VarianceFeeParametersSetEventFilter =
  TypedEventFilter<VarianceFeeParametersSetEvent>;

export interface OptionMarketPricer extends BaseContract {
  contractName: "OptionMarketPricer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionMarketPricerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPricingParams(
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.PricingParametersStructOutput] & {
        pricingParameters: OptionMarketPricer.PricingParametersStructOutput;
      }
    >;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeWeightedFee: BigNumber }>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.TradeLimitParametersStructOutput] & {
        tradeLimitParameters: OptionMarketPricer.TradeLimitParametersStructOutput;
      }
    >;

    getTradeResult(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.TradeResultStructOutput] & {
        tradeResult: OptionMarketPricer.TradeResultStructOutput;
      }
    >;

    getVarianceFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.VarianceFeeComponentsStructOutput] & {
        varianceFeeComponents: OptionMarketPricer.VarianceFeeComponentsStructOutput;
      }
    >;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.VarianceFeeParametersStructOutput] & {
        varianceFeeParameters: OptionMarketPricer.VarianceFeeParametersStructOutput;
      }
    >;

    getVegaUtilFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<
      [OptionMarketPricer.VegaUtilFeeComponentsStructOutput] & {
        vegaUtilFeeComponents: OptionMarketPricer.VegaUtilFeeComponentsStructOutput;
      }
    >;

    init(
      _optionMarket: string,
      _greekCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ivImpactForTrade(
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricingParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        optionPriceFeeCoefficient: BigNumber;
        optionPriceFee1xPoint: BigNumber;
        optionPriceFee2xPoint: BigNumber;
        spotPriceFeeCoefficient: BigNumber;
        spotPriceFee1xPoint: BigNumber;
        spotPriceFee2xPoint: BigNumber;
        vegaFeeCoefficient: BigNumber;
        standardSize: BigNumber;
        skewAdjustmentFactor: BigNumber;
      }
    >;

    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeLimitParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minDelta: BigNumber;
        minForceCloseDelta: BigNumber;
        tradingCutoff: BigNumber;
        minBaseIV: BigNumber;
        maxBaseIV: BigNumber;
        minSkew: BigNumber;
        maxSkew: BigNumber;
        minVol: BigNumber;
        maxVol: BigNumber;
        absMinSkew: BigNumber;
        absMaxSkew: BigNumber;
        capSkewsToAbs: boolean;
      }
    >;

    updateCacheAndGetTradeResult(
      strike: OptionMarket.StrikeStruct,
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      boardExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    varianceFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        defaultVarianceFeeCoefficient: BigNumber;
        forceCloseVarianceFeeCoefficient: BigNumber;
        skewAdjustmentCoefficient: BigNumber;
        referenceSkew: BigNumber;
        minimumStaticSkewAdjustment: BigNumber;
        vegaCoefficient: BigNumber;
        minimumStaticVega: BigNumber;
        ivVarianceCoefficient: BigNumber;
        minimumStaticIvVariance: BigNumber;
      }
    >;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPricingParams(
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.PricingParametersStructOutput>;

  getTimeWeightedFee(
    expiry: BigNumberish,
    pointA: BigNumberish,
    pointB: BigNumberish,
    coefficient: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeLimitParams(
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.TradeLimitParametersStructOutput>;

  getTradeResult(
    trade: OptionMarket.TradeParametersStruct,
    pricing: OptionGreekCache.TradePricingStruct,
    newBaseIv: BigNumberish,
    newSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.TradeResultStructOutput>;

  getVarianceFee(
    trade: OptionMarket.TradeParametersStruct,
    pricing: OptionGreekCache.TradePricingStruct,
    skew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.VarianceFeeComponentsStructOutput>;

  getVarianceFeeParams(
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.VarianceFeeParametersStructOutput>;

  getVegaUtilFee(
    trade: OptionMarket.TradeParametersStruct,
    pricing: OptionGreekCache.TradePricingStruct,
    overrides?: CallOverrides
  ): Promise<OptionMarketPricer.VegaUtilFeeComponentsStructOutput>;

  init(
    _optionMarket: string,
    _greekCache: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ivImpactForTrade(
    trade: OptionMarket.TradeParametersStruct,
    boardBaseIv: BigNumberish,
    strikeSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
  >;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricingParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      optionPriceFeeCoefficient: BigNumber;
      optionPriceFee1xPoint: BigNumber;
      optionPriceFee2xPoint: BigNumber;
      spotPriceFeeCoefficient: BigNumber;
      spotPriceFee1xPoint: BigNumber;
      spotPriceFee2xPoint: BigNumber;
      vegaFeeCoefficient: BigNumber;
      standardSize: BigNumber;
      skewAdjustmentFactor: BigNumber;
    }
  >;

  setPricingParams(
    _pricingParams: OptionMarketPricer.PricingParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradeLimitParams(
    _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVarianceFeeParams(
    _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeLimitParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      minDelta: BigNumber;
      minForceCloseDelta: BigNumber;
      tradingCutoff: BigNumber;
      minBaseIV: BigNumber;
      maxBaseIV: BigNumber;
      minSkew: BigNumber;
      maxSkew: BigNumber;
      minVol: BigNumber;
      maxVol: BigNumber;
      absMinSkew: BigNumber;
      absMaxSkew: BigNumber;
      capSkewsToAbs: boolean;
    }
  >;

  updateCacheAndGetTradeResult(
    strike: OptionMarket.StrikeStruct,
    trade: OptionMarket.TradeParametersStruct,
    boardBaseIv: BigNumberish,
    boardExpiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  varianceFeeParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      defaultVarianceFeeCoefficient: BigNumber;
      forceCloseVarianceFeeCoefficient: BigNumber;
      skewAdjustmentCoefficient: BigNumber;
      referenceSkew: BigNumber;
      minimumStaticSkewAdjustment: BigNumber;
      vegaCoefficient: BigNumber;
      minimumStaticVega: BigNumber;
      ivVarianceCoefficient: BigNumber;
      minimumStaticIvVariance: BigNumber;
    }
  >;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    getPricingParams(
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.PricingParametersStructOutput>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.TradeLimitParametersStructOutput>;

    getTradeResult(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.TradeResultStructOutput>;

    getVarianceFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.VarianceFeeComponentsStructOutput>;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.VarianceFeeParametersStructOutput>;

    getVegaUtilFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.VegaUtilFeeComponentsStructOutput>;

    init(
      _optionMarket: string,
      _greekCache: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ivImpactForTrade(
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricingParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        optionPriceFeeCoefficient: BigNumber;
        optionPriceFee1xPoint: BigNumber;
        optionPriceFee2xPoint: BigNumber;
        spotPriceFeeCoefficient: BigNumber;
        spotPriceFee1xPoint: BigNumber;
        spotPriceFee2xPoint: BigNumber;
        vegaFeeCoefficient: BigNumber;
        standardSize: BigNumber;
        skewAdjustmentFactor: BigNumber;
      }
    >;

    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeLimitParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minDelta: BigNumber;
        minForceCloseDelta: BigNumber;
        tradingCutoff: BigNumber;
        minBaseIV: BigNumber;
        maxBaseIV: BigNumber;
        minSkew: BigNumber;
        maxSkew: BigNumber;
        minVol: BigNumber;
        maxVol: BigNumber;
        absMinSkew: BigNumber;
        absMaxSkew: BigNumber;
        capSkewsToAbs: boolean;
      }
    >;

    updateCacheAndGetTradeResult(
      strike: OptionMarket.StrikeStruct,
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      boardExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionMarketPricer.TradeResultStructOutput>;

    varianceFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        defaultVarianceFeeCoefficient: BigNumber;
        forceCloseVarianceFeeCoefficient: BigNumber;
        skewAdjustmentCoefficient: BigNumber;
        referenceSkew: BigNumber;
        minimumStaticSkewAdjustment: BigNumber;
        vegaCoefficient: BigNumber;
        minimumStaticVega: BigNumber;
        ivVarianceCoefficient: BigNumber;
        minimumStaticIvVariance: BigNumber;
      }
    >;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    "PricingParametersSet(tuple)"(
      pricingParams?: null
    ): PricingParametersSetEventFilter;
    PricingParametersSet(pricingParams?: null): PricingParametersSetEventFilter;

    "TradeLimitParametersSet(tuple)"(
      tradeLimitParams?: null
    ): TradeLimitParametersSetEventFilter;
    TradeLimitParametersSet(
      tradeLimitParams?: null
    ): TradeLimitParametersSetEventFilter;

    "VarianceFeeParametersSet(tuple)"(
      varianceFeeParams?: null
    ): VarianceFeeParametersSetEventFilter;
    VarianceFeeParametersSet(
      varianceFeeParams?: null
    ): VarianceFeeParametersSetEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPricingParams(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLimitParams(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeResult(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarianceFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarianceFeeParams(overrides?: CallOverrides): Promise<BigNumber>;

    getVegaUtilFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _optionMarket: string,
      _greekCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ivImpactForTrade(
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricingParams(overrides?: CallOverrides): Promise<BigNumber>;

    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeLimitParams(overrides?: CallOverrides): Promise<BigNumber>;

    updateCacheAndGetTradeResult(
      strike: OptionMarket.StrikeStruct,
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      boardExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    varianceFeeParams(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPricingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeResult(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarianceFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVegaUtilFee(
      trade: OptionMarket.TradeParametersStruct,
      pricing: OptionGreekCache.TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _optionMarket: string,
      _greekCache: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ivImpactForTrade(
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeLimitParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCacheAndGetTradeResult(
      strike: OptionMarket.StrikeStruct,
      trade: OptionMarket.TradeParametersStruct,
      boardBaseIv: BigNumberish,
      boardExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    varianceFeeParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
